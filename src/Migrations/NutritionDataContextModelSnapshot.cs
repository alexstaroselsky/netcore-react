// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutritionData.Backend.Data;

namespace NutritionData.Backend.Migrations
{
    [DbContext(typeof(NutritionDataContext))]
    partial class NutritionDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("NutritionData.Backend.Models.food.Description", b =>
                {
                    b.Property<string>("DescriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CarbohydrateFactor");

                    b.Property<string>("CommercialName");

                    b.Property<string>("DatabaseSource");

                    b.Property<decimal>("FatFactor");

                    b.Property<string>("FoodGroup");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Name");

                    b.Property<decimal>("NitrogenToProteinConversionFactor");

                    b.Property<decimal>("ProteinFactor");

                    b.Property<string>("RefuseDescription");

                    b.Property<string>("RefusePercent");

                    b.Property<string>("ReportingUnit");

                    b.Property<string>("ScientificName");

                    b.Property<string>("ShortDescription");

                    b.HasKey("DescriptionId");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Food", b =>
                {
                    b.Property<string>("FoodId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescriptionId");

                    b.HasKey("FoodId");

                    b.HasIndex("DescriptionId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Measure", b =>
                {
                    b.Property<string>("MeasureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EUnit");

                    b.Property<decimal>("Equivalent");

                    b.Property<string>("Label");

                    b.Property<string>("NutrientId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("Value");

                    b.HasKey("MeasureId");

                    b.HasIndex("NutrientId");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Nutrient", b =>
                {
                    b.Property<string>("NutrientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FoodId");

                    b.Property<string>("Name");

                    b.Property<string>("Unit");

                    b.Property<string>("Value");

                    b.HasKey("NutrientId");

                    b.HasIndex("FoodId");

                    b.ToTable("Nutrient");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Source", b =>
                {
                    b.Property<string>("SourceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Authors");

                    b.Property<string>("EndPage");

                    b.Property<string>("FoodId");

                    b.Property<string>("Issue");

                    b.Property<string>("StartPage");

                    b.Property<string>("Title");

                    b.Property<string>("Volume");

                    b.Property<string>("Year");

                    b.HasKey("SourceId");

                    b.HasIndex("FoodId");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("NutritionaData.Backend.Models.Footnote", b =>
                {
                    b.Property<string>("FootnoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FoodId");

                    b.Property<string>("NDBNumber")
                        .IsRequired();

                    b.Property<string>("NutrientNumber");

                    b.Property<string>("SequenceNumber")
                        .IsRequired();

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("FootnoteId");

                    b.HasIndex("FoodId");

                    b.ToTable("Footnote");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Food", b =>
                {
                    b.HasOne("NutritionData.Backend.Models.food.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Measure", b =>
                {
                    b.HasOne("NutritionData.Backend.Models.food.Nutrient")
                        .WithMany("Measures")
                        .HasForeignKey("NutrientId");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Nutrient", b =>
                {
                    b.HasOne("NutritionData.Backend.Models.food.Food")
                        .WithMany("Nutrients")
                        .HasForeignKey("FoodId");
                });

            modelBuilder.Entity("NutritionData.Backend.Models.food.Source", b =>
                {
                    b.HasOne("NutritionData.Backend.Models.food.Food")
                        .WithMany("Sources")
                        .HasForeignKey("FoodId");
                });

            modelBuilder.Entity("NutritionaData.Backend.Models.Footnote", b =>
                {
                    b.HasOne("NutritionData.Backend.Models.food.Food")
                        .WithMany("Footnotes")
                        .HasForeignKey("FoodId");
                });
#pragma warning restore 612, 618
        }
    }
}
